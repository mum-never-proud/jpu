{"version":3,"sources":["constants/instructions.js","services/create-memory.js","utils/create-register-map.js","constants/registers.js","jpu.js"],"names":["MOV_LIT_REG","MOV_REG_REG","MOV_MEM_REG","MOV_REG_MEM","ADD_REG_REG","JMP_NOT_EQ","createMemory","size","buffer","ArrayBuffer","dv","DataView","createRegisterMap","registers","reduce","map","name","idx","JPU","memory","Error","resetRegisters","Object","prototype","hasOwnProperty","call","registerMap","getUint16","registerNames","length","value","setUint16","nextInstructionAddress","getRegister","nextInstruction","getUint8","setRegister","join","addr","eightBytes","Array","from","_","i","v","toString","padStart","instruction","fetch16","register","getRegisterOffset","fetch","fromRegister","toRegister","fromMemory","fromReg","toMemory","register1","register2","value1","value2","execute","module","exports"],"mappings":"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","file":"jpu.min.js","sourceRoot":"../src","sourcesContent":["const MOV_LIT_REG = 0x01;\nconst MOV_REG_REG = 0x02;\nconst MOV_MEM_REG = 0x03;\nconst MOV_REG_MEM = 0x04;\n\nconst ADD_REG_REG = 0x10;\n\nconst JMP_NOT_EQ = 0x20;\n\nexport {\n  MOV_LIT_REG,\n  MOV_REG_REG,\n  MOV_MEM_REG,\n  MOV_REG_MEM,\n  ADD_REG_REG,\n  JMP_NOT_EQ,\n};\n","export default function createMemory(size) { // in bytes\n  const buffer = new ArrayBuffer(size);\n  const dv = new DataView(buffer);\n\n  return dv;\n}\n","export default function createRegisterMap(registers) {\n  return registers.reduce((map, name, idx) => {\n    // eslint-disable-next-line no-param-reassign\n    map[name] = idx * 2;\n\n    return map;\n  }, {});\n}\n","export default [\n  'ip', 'acc',\n  'r1', 'r2', 'r3', 'r4', // arbitrary can be increased or descreased based on requirement\n];\n","import {\n  MOV_LIT_REG,\n  MOV_REG_REG,\n  MOV_MEM_REG,\n  MOV_REG_MEM,\n  ADD_REG_REG,\n} from './constants/instructions';\nimport createMemory from './services/create-memory';\nimport createRegisterMap from './utils/create-register-map';\nimport registerNames from './constants/registers';\n\nclass JPU {\n  constructor(memory) {\n    if (!(memory instanceof DataView)) {\n      throw Error('memory should be an instance of DataView, make use of JPU.createMemory(sizeInBytes)');\n    }\n\n    this.memory = memory;\n    this.resetRegisters();\n  }\n\n  getRegister(name) {\n    if (Object.prototype.hasOwnProperty.call(this.registerMap, name)) {\n      return this.registers.getUint16(this.registerMap[name]);\n    }\n\n    throw Error('register not found');\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getRegisterOffset(idx) {\n    return (idx % registerNames.length) * 2;\n  }\n\n  setRegister(name, value) {\n    if (Object.prototype.hasOwnProperty.call(this.registerMap, name)) {\n      return this.registers.setUint16(this.registerMap[name], value);\n    }\n\n    throw Error('register not found');\n  }\n\n  fetch() {\n    const nextInstructionAddress = this.getRegister('ip');\n    const nextInstruction = this.memory.getUint8(nextInstructionAddress);\n\n    this.setRegister('ip', nextInstructionAddress + 1);\n\n    return nextInstruction;\n  }\n\n  fetch16() {\n    const nextInstructionAddress = this.getRegister('ip');\n    const nextInstruction = this.memory.getUint16(nextInstructionAddress);\n\n    this.setRegister('ip', nextInstructionAddress + 2);\n\n    return nextInstruction;\n  }\n\n  viewRegisters() {\n    return registerNames.map((name) => `${name}\\t\\t\\t${this.registers.getUint16(this.registerMap[name])}`).join('\\n');\n  }\n\n  viewMemoryAt(addr) {\n    const eightBytes = Array.from({ length: 8 }, (_, i) => this.memory.getUint8(addr + i))\n      .map((v) => `0x${v.toString(16).padStart(2, '0')}`)\n      .join(' ');\n\n    return `0x${addr.toString(16).padStart(4, '0')} : ${eightBytes}`;\n  }\n\n  resetRegisters() {\n    this.registers = createMemory(registerNames.length * 2);\n    this.registerMap = createRegisterMap(registerNames);\n  }\n\n  execute(instruction) {\n    switch (instruction) {\n      // memory\n      case MOV_LIT_REG: {\n        const value = this.fetch16();\n        const register = this.getRegisterOffset(this.fetch());\n\n        this.registers.setUint16(register, value);\n\n        return;\n      }\n\n      case MOV_REG_REG: {\n        const fromRegister = this.getRegisterOffset(this.fetch());\n        const toRegister = this.getRegisterOffset(this.fetch());\n        const value = this.registers.getUint16(fromRegister);\n\n        this.registers.setUint16(toRegister, value);\n\n        return;\n      }\n\n      case MOV_MEM_REG: {\n        const fromMemory = this.fetch16();\n        const toRegister = this.getRegisterOffset(this.fetch());\n        const value = this.memory.getUint16(fromMemory);\n\n        this.registers.setUint16(toRegister, value);\n\n        return;\n      }\n\n      case MOV_REG_MEM: {\n        const fromReg = this.getRegisterOffset(this.fetch());\n        const toMemory = this.fetch16();\n        const value = this.registers.getUint16(fromReg);\n\n        this.memory.setUint16(toMemory, value);\n\n        return;\n      }\n      // arithmetic\n      case ADD_REG_REG: {\n        const register1 = this.getRegisterOffset(this.fetch());\n        const register2 = this.getRegisterOffset(this.fetch());\n        const value1 = this.registers.getUint16(register1);\n        const value2 = this.registers.getUint16(register2);\n\n        this.setRegister('acc', value1 + value2);\n      }\n\n      // no default\n    }\n  }\n\n  step() {\n    this.execute(this.fetch());\n\n    return this;\n  }\n\n  static createMemory(size) {\n    return createMemory(size);\n  }\n}\n\nmodule.exports = JPU;\n"]}