{"version":3,"sources":["constants/instructions.js","services/create-memory.js","utils/create-register-map.js","constants/registers.js","jpu.js"],"names":["MOV_LIT_REG","MOV_REG_REG","MOV_MEM_REG","MOV_REG_MEM","ADD_REG_REG","JMP_NOT_EQ","size","buffer","ArrayBuffer","dv","DataView","registers","reduce","map","name","idx","JPU","memory","Error","resetRegisters","registerMap","hasOwnProperty","getUint16","registerNames","length","value","setUint16","nextInstructionAddress","getRegister","nextInstruction","getUint8","setRegister","join","addr","eightBytes","Array","from","_","i","v","toString","padStart","instruction","fetch16","register","getRegisterOffset","fetch","fromRegister","toRegister","fromMemory","fromReg","toMemory","register1","register2","value1","value2","execute","module","exports"],"mappings":"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","file":"jpu.js","sourceRoot":"../src","sourcesContent":["const MOV_LIT_REG = 0x01;\nconst MOV_REG_REG = 0x02;\nconst MOV_MEM_REG = 0x03;\nconst MOV_REG_MEM = 0x04;\n\nconst ADD_REG_REG = 0x10;\n\nconst JMP_NOT_EQ = 0x20;\n\nexport {\n  MOV_LIT_REG,\n  MOV_REG_REG,\n  MOV_MEM_REG,\n  MOV_REG_MEM,\n  ADD_REG_REG,\n  JMP_NOT_EQ\n};\n","export default function (size) { // in bytes\n  const buffer = new ArrayBuffer(size);\n  const dv = new DataView(buffer);\n\n  return dv;\n}\n","export default function (registers) {\n  return registers.reduce((map, name, idx) => {\n    map[name] = idx * 2;\n\n    return map;\n  }, {});\n}\n","export default [\n  'ip', 'acc',\n  'r1', 'r2', 'r3', 'r4' // arbitrary can be increased or descreased based on requirement\n];\n","import {\n  MOV_LIT_REG,\n  MOV_REG_REG,\n  MOV_MEM_REG,\n  MOV_REG_MEM,\n  ADD_REG_REG\n} from './constants/instructions';\nimport createMemory from './services/create-memory';\nimport createRegisterMap from './utils/create-register-map';\nimport registerNames from './constants/registers';\n\nclass JPU {\n  constructor (memory) {\n    if (!(memory instanceof DataView)) {\n      throw Error('memory should be an instance of DataView, make use of JPU.createMemory(sizeInBytes)');\n    }\n\n    this.memory = memory;\n    this.resetRegisters();\n  }\n\n  getRegister (name) {\n    if (this.registerMap.hasOwnProperty(name)) {\n      return this.registers.getUint16(this.registerMap[name]);\n    }\n\n    throw Error('register not found');\n  }\n\n  getRegisterOffset (idx) {\n    return (idx % registerNames.length) * 2;\n  }\n\n  setRegister (name, value) {\n    if (this.registerMap.hasOwnProperty(name)) {\n      return this.registers.setUint16(this.registerMap[name], value);\n    }\n\n    throw Error('register not found');\n  }\n\n  fetch () {\n    const nextInstructionAddress = this.getRegister('ip');\n    const nextInstruction = this.memory.getUint8(nextInstructionAddress);\n\n    this.setRegister('ip', nextInstructionAddress + 1);\n\n    return nextInstruction;\n  }\n\n  fetch16 () {\n    const nextInstructionAddress = this.getRegister('ip');\n    const nextInstruction = this.memory.getUint16(nextInstructionAddress);\n\n    this.setRegister('ip', nextInstructionAddress + 2);\n\n    return nextInstruction;\n  }\n\n  viewRegisters () {\n    return registerNames.map(name =>\n      `${name}\\t\\t\\t${this.registers.getUint16(this.registerMap[name])}`\n    ).join('\\n');\n  }\n\n  viewMemoryAt (addr) {\n    const eightBytes = Array.from({ length: 8 }, (_, i) => this.memory.getUint8(addr + i))\n      .map(v => `0x${v.toString(16).padStart(2, '0')}`)\n      .join(' ');\n\n    return `0x${addr.toString(16).padStart(4, '0')} : ${eightBytes}`;\n  }\n\n  resetRegisters() {\n    this.registers = createMemory(registerNames.length * 2);\n    this.registerMap = createRegisterMap(registerNames);\n  }\n\n  execute (instruction) {\n    switch (instruction) {\n      // memory\n      case MOV_LIT_REG: {\n        const value = this.fetch16();\n        const register = this.getRegisterOffset(this.fetch());\n\n        this.registers.setUint16(register, value);\n\n        return;\n      }\n\n      case MOV_REG_REG: {\n        const fromRegister = this.getRegisterOffset(this.fetch());\n        const toRegister = this.getRegisterOffset(this.fetch());\n        const value = this.registers.getUint16(fromRegister);\n\n        this.registers.setUint16(toRegister, value);\n\n        return;\n      }\n\n      case MOV_MEM_REG: {\n        const fromMemory = this.fetch16();\n        const toRegister = this.getRegisterOffset(this.fetch());\n        const value = this.memory.getUint16(fromMemory);\n\n        this.registers.setUint16(toRegister, value);\n\n        return;\n      }\n\n      case MOV_REG_MEM: {\n        const fromReg = this.getRegisterOffset(this.fetch());\n        const toMemory = this.fetch16();\n        const value = this.registers.getUint16(fromReg);\n\n        this.memory.setUint16(toMemory, value);\n\n        return;\n      }\n      // arithmetic\n      case ADD_REG_REG: {\n        const register1 = this.getRegisterOffset(this.fetch());\n        const register2 = this.getRegisterOffset(this.fetch());\n        const value1 = this.registers.getUint16(register1);\n        const value2 = this.registers.getUint16(register2);\n\n        this.setRegister('acc', value1 + value2);\n\n        return;\n      }\n    }\n  }\n\n  step () {\n    this.execute(this.fetch());\n\n    return this;\n  }\n\n  static createMemory (size) {\n    return createMemory(size);\n  }\n}\n\nmodule.exports = JPU;\n"]}